/// this file is auto generated by its Rust definition, do not edit manually

export type Method = "HEAD" | "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "OPTIONS" | "CONNECT" | "TRACE";
type _Method = Method;

export type Empty = Record<string, never>;

export type Endpoint<
  Method extends _Method,
  Path extends string,
  Params,
  Query,
  Payload,
  Output,
> = {
  method: Method;
  path: Path;
  // this $ types are never constructed, only used as a template
  $params?: Params;
  $query?: Query;
  $payload?: Payload;
  $output?: Output;
};

type ApiDefinition = Partial<Record<string, Partial<Record<Method, Endpoint<any, any, any, any, any, any>>>>>;

export type ErrorPayload = {
  error:
    & { status: number; message: string }
    & (
      | { kind: "INTERNAL" }
      | { kind: "RESOURCE_NOT_FOUND" }
      | { kind: "RECORD_NOT_FOUND" }
      | { kind: "INVALID_PARAMS_PARSE" }
      | { kind: "INVALID_PARAMS_VALIDATE" }
      | { kind: "INVALID_QUERY_PARSE" }
      | { kind: "INVALID_QUERY_VALIDATE" }
      | { kind: "PAYLOAD_READ" }
      | { kind: "PAYLOAD_CONTENT_TYPE" }
      | { kind: "INVALID_PAYLOAD_PARSE" }
      | { kind: "INVALID_PAYLOAD_VALIDATE" }
    );
};

export const Api = {
  "/users": {
    "GET": { method: "GET", path: "/users" } as Endpoint<
      "GET",
      "/users",
      Empty,
      { skip?: number | undefined; limit?: number | undefined },
      Empty,
      { skip: number; limit: number; total: number; items: Array<{ id: string; email: string }> }
    >,
  },
  "/users/:id": {
    "GET": { method: "GET", path: "/users/:id" } as Endpoint<
      "GET",
      "/users/:id",
      { id: string },
      Empty,
      Empty,
      { id: string; email: string }
    >,
  },
} satisfies ApiDefinition;
